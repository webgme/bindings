/*eslint-env node, mocha*/
/**
 * Generated by PluginGenerator 2.20.5 from webgme on Tue Mar 09 2021 13:00:55 GMT-0600 (Central Standard Time).
 */

describe.skip('PythonBindingsWaitMerge', function () {
    var testFixture = require('../../globals'),
        gmeConfig = testFixture.getGmeConfig(),
        expect = testFixture.expect,
        logger = testFixture.logger.fork('PythonBinPythonBindingsWaitMergeingsWait'),
        PluginCliManager = testFixture.WebGME.PluginCliManager,
        projectName = 'testProject',
        pluginName = 'PythonBindingsWait',
        project,
        gmeAuth,
        storage,
        commitHash;

    before(function (done) {
        this.timeout(10000);
        gmeConfig.storage.autoMerge.enable = true;
        testFixture.clearDBAndGetGMEAuth(gmeConfig, projectName)
            .then(function (gmeAuth_) {
                gmeAuth = gmeAuth_;
                // This uses in memory storage. Use testFixture.getMongoStorage to persist test to database.
                storage = testFixture.getMemoryStorage(logger, gmeConfig, gmeAuth);
                return storage.openDatabase();
            })
            .then(function () {
                var importParam = {
                    projectSeed: testFixture.path.join(testFixture.SEED_DIR, 'EmptyProject.webgmex'),
                    projectName: projectName,
                    branchName: 'master',
                    logger: logger,
                    gmeConfig: gmeConfig
                };

                return testFixture.importProject(storage, importParam);
            })
            .then(function (importResult) {
                project = importResult.project;
                commitHash = importResult.commitHash;
                return project.createBranch('test', commitHash);
            })
            .nodeify(done);
    });

    after(function (done) {
        storage.closeDatabase()
            .then(function () {
                return gmeAuth.unload();
            })
            .nodeify(done);
    });

    it('should run multiple instances of the plugin and the second should auto-merge', function (done) {
        this.timeout(5000);
        var manager = new PluginCliManager(null, logger, gmeConfig),
            pluginConfig = {
                modify: true,
                wait: 2
            },
            context = {
                project: project,
                commitHash: commitHash,
                branchName: 'test',
                activeNode: '/1',
            },
            shortFinished = false,
            finishedSoFar = 0;

        function finished() {
            if (++finishedSoFar === 2) {
                done(null);
            }
        }
        manager.executePlugin(pluginName, pluginConfig, context, function (err, pluginResult) {
            try {
                expect(err).to.equal(null);
                expect(typeof pluginResult).to.equal('object');
                expect(pluginResult.success).to.equal(true);
                expect(shortFinished).to.equal(true);
            } catch (e) {
                done(e);
                return;
            }
            
            // this should be auto-merged
            project.getBranchHash('test')
                .then(function (branchHash) {
                    expect(branchHash).not.to.equal(commitHash);
                    commitHash = branchHash;
                })
                .then(finished)
                .catch(done);

        });

        const secondConfig = JSON.parse(JSON.stringify(pluginConfig));
        const secondContext = {
            project: project,
            commitHash: commitHash,
            branchName: 'test',
            activeNode: '',
        };
        secondContext.activeNode = '';
        secondConfig.wait = 0;
        manager.executePlugin(pluginName, secondConfig, secondContext, function (err, pluginResult) {
            try {
                expect(err).to.equal(null);
                expect(typeof pluginResult).to.equal('object');
                expect(pluginResult.success).to.equal(true);
            } catch (e) {
                done(e);
                return;
            }

            shortFinished = true;

            project.getBranchHash('test')
                .then(function (branchHash) {
                    expect(branchHash).to.not.equal(commitHash);
                    commitHash = branchHash;
                })
                .then(finished)
                .catch(done);
        });

    });
});
